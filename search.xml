<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[AsyncTask的使用与演示（加载图片）]]></title>
    <url>%2F2018%2Fcjlg1o2dg0000ysv5wd5ea9pb%2F</url>
    <content type="text"><![CDATA[AsyncTask(异步任务） 主要作用是处理主线程与子线程之间的通信问题。 主线程非常重要，主要用加载我们的UI界面，完成系统和我们用户之间的交互，并将交互后的结果展示给用户，因此主线程又称为UI线程。 我们不能在主线程中进行耗时操作（加载网络图片或进行数据库查询），因为会阻塞我们的UI Thread,同样我们也不能在子线程当中来操作我们的UI元素，那么如果我们想要从网络上下载一个图片，又怎么把它更新到我们的UI控件上呢，这就关系到主线程和子线程之间的通信问题了。这时我们就可以用到AsyncTask。 一般情况下，当我们需要定义一个AsyncTask时，就要定义一个类来继承这个抽象类，并实现这个抽象类中的唯一的个抽象方法doInBackground，简单的总结AsyncTask的用法就是：三个泛型，四个步骤。 三个泛型 AsyncTask&lt;Params,Progress,Result&gt; Params:这个泛型指定的是我们传递给异步任务执行时的参数的类型。（通常指定的URL路经即String类型）Progress:这个泛型指定的是我们的异步任务在执行的时候将执行的进度返回给UI线程的参数的类型。（进度条的单位通常都是Integer类型）Result:这个泛型指定的异步任务执行完后返回给UI线程的结果的类型。 我们在定义一个类继承AsyncTask类的时候，必须要指定好这三个泛型的类型，如果都不指定的话，则将其都写成void。 四个步骤当我们执行一个异步任务的时候，其需要按照下面的4个步骤分别执行： onPreExecute（）：这个方法是在异步任务执行之前执行的，并且是在主线程当中执行，一般情况下，我们在这个方法里做一些UI控件的初始化动作，例如：弹出ProgressDialogdoInBackground（Params…params）：在onPreExecute（）方法执行完后会立即执行这个方法，它是用来处理异步任务的方法。 Android操作系统会在后台的线程池中开启一个子线程来执行我们这个方法，所以这个方法是在子线程中执行的。这个方法执行完之后，会将我们的结果发送给最后一个onPostExecute（）方法，在这个方法里，我们可以从网络当中获取数据等一些耗时操作onProgressUpdate(Progress…values):这个方法和onPreExecute方法一样都是在主线程当中执行的额，它主要是将执行的进度返回给我们的UI界面，更新我们的进度，例如：下载一张网络图片，我们要时刻显示它的进度，就可以使用这个方法来更新我们的进度。在这个方法调用之前，我们需要在doInBackground方法中调用一个publishProgress（Progress）的方法来将我们的进度时时刻刻传递给onPostUpdate方法来更新。onPostExecute（Result…result）：当我们的异步任务执行完之后就会将结果返回给这个方法，这个方法和onPreExecute，onProgressUpdate方法一样都是在主线程中操作的，我们可以将返回结果显示在UI控件上。 我们的AsyncTask抽象类只有一个抽象方法，因为，如果我们要做一个异步任务，我们必须为其开辟一个新的线程，让其完成一些操作，而在完成这个异步任务时，我们可能并不需要弹出ProgressDialog并更新进度条，也不要需要将结果更新给我们的UI界面，所以除了doInBackground方法之外的三个方法都不是必须要有的，因此我们必须要实现的方法是doInBackground方法。 在使用AsyncTask做异步任务时，必须要遵循以下原则： AsyncTask类必须要在UI Thread中加载，在Android Jelly_Bean版本之后这些都是自动完成的 execute方法必须在UI Thread当中调用 AsyncTask对象必须在UI Thread当中进行实例化 AsyncTask任务只能被执行一次 onPreExecute，doInBackground，publishProgress，onProgressUpdate，onPostExecute方法，这些都是由Android系统自动调用的，不能手动去调用。 加载一张网络图片代码展示 Activity_main.xml: &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;ImageView android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;300dp&quot; android:id=&quot;@+id/image_view&quot; android:layout_centerInParent=&quot;true&quot;/&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/image_button&quot; android:layout_centerInParent=&quot;true&quot; android:text=&quot;@string/picture&quot; android:layout_below=&quot;@id/image_view&quot;/&gt; &lt;/RelativeLayout&gt; AndroidManifest.xml: &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; package=&quot;com.bignerdranch.android.asynctask&quot;&gt; &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt; &lt;application android:allowBackup=&quot;true&quot; android:icon=&quot;@mipmap/ic_launcher&quot; android:label=&quot;@string/app_name&quot; android:supportsRtl=&quot;true&quot; android:theme=&quot;@style/AppTheme&quot;&gt; &lt;activity android:name=&quot;.MainActivity&quot;&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;android.intent.action.MAIN&quot;/&gt; &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot;/&gt; &lt;/intent-filter&gt; &lt;/activity&gt;&lt;!-- ATTENTION: This was auto-generated to add Google Play services to your project for App Indexing. See https://g.co/AppIndexing/AndroidStudio for more information. --&gt; &lt;meta-data android:name=&quot;com.google.android.gms.version&quot; android:value=&quot;@integer/google_play_services_version&quot;/&gt; &lt;/application&gt; &lt;/manifest&gt; string.xml: &lt;resources&gt; &lt;string name=&quot;app_name&quot;&gt;AsyncTask&lt;/string&gt; &lt;string name=&quot;picture&quot;&gt; 加载一张网络图片 &lt;/string&gt; &lt;/resources&gt; MainActivity.java: package com.bignerdranch.android.asynctask; import android.app.ProgressDialog;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.os.AsyncTask;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.view.View;import android.widget.Button;import android.widget.ImageView; import com.google.android.gms.appindexing.AppIndex;import com.google.android.gms.common.api.GoogleApiClient; import java.io.IOException;import java.io.InputStream;import java.net.HttpURLConnection;import java.net.URL; public class MainActivity extends AppCompatActivity { private ImageView mImageView; private Button mButton; ProgressDialog progressDialog; private final static String IMAGE_PATH = “http://img4.imgtn.bdimg.com/it/u=3153784763,2205498087&amp;fm=27&amp;gp=0.jpg&quot;; private GoogleApiClient mClient; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mImageView = (ImageView) findViewById(R.id.image_view); mButton = (Button) findViewById(R.id.image_button); mButton.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { new MyAsyncTask().execute(IMAGE_PATH); } }); progressDialog = new ProgressDialog(MainActivity.this); progressDialog.setTitle(&quot;提示信息&quot;); progressDialog.setMessage(&quot;正在加载，请稍候...&quot;); progressDialog.setCancelable(false); progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER); mClient = new GoogleApiClient.Builder(this).addApi(AppIndex.API).build(); } public class MyAsyncTask extends AsyncTask&lt;String, Bitmap, Bitmap&gt; { @Override public void onPreExecute() { super.onPreExecute(); progressDialog.show(); } protected Bitmap doInBackground(String... params) { return getBitmap(); } private Bitmap getBitmap() { Bitmap bitmap = null; HttpURLConnection connection = null; InputStream inputStream = null; try { URL url = new URL(IMAGE_PATH); connection = (HttpURLConnection)url.openConnection(); connection.setDoInput(true); connection.connect(); inputStream=connection.getInputStream(); bitmap= BitmapFactory.decodeStream(inputStream); } catch (IOException e) { e.printStackTrace(); } finally { if (inputStream!=null){ try { inputStream.close(); } catch (IOException e) { e.printStackTrace(); } } if(connection!=null){ connection.disconnect(); } } return bitmap; } public void onProgressUpdate(Bitmap values){ super.onProgressUpdate(values); } public void onPostExecute(Bitmap result){ super.onPostExecute(result); mImageView.setImageBitmap(result); progressDialog.dismiss(); } } }参考文献：AsyncTask详解]]></content>
      <categories>
        <category>Android</category>
        <category>AsyncTask</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>AsyncTask</tag>
        <tag>Thread</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TextView的用法]]></title>
    <url>%2F2018%2Fcjlg1o2du0006ysv5zjci5vrj%2F</url>
    <content type="text"><![CDATA[用TextView显示图片和文字可将图片与文字写在一个TextView中 android:drawableTop=&quot;@drawable/grass&quot; &lt;!--more--&gt; 用TextView显示两种颜色的字体在主活动中添加如下代码：private String source = ““ + “第一种颜色，第二种颜色，” + “百度一下\””;TextView mTextShow=(TextView)findViewById(R.id.myTextView);mTextShow.setText(Html.fromHtml(source));//将source通过Html解析返回给客户端mTextShow.setMovementMethod(LinkMovementMethod.getInstance());//不设置，点击只能是无效的 代码解释：标签：规定文本的尺寸、字体和颜色： 其中\是转义字符，用来转义“ 标签定义超链接，用于从一个页面链接到另一个页面。 元素最重要的属性是 href 属性，它指定链接的目标。 在所有浏览器中，链接的默认外观如下： 未被访问的链接带有下划线而且是蓝色的 已被访问的链接带有下划线而且是紫色的 活动链接带有下划线而且是红色的 使用SpannableString String text1 = “sometimes to say,”; String text2 = “is not to believe”; String text = text1 + text2; TextView tvtext = (TextView) findViewById(R.id.text_view1); SpannableString span = new SpannableString(text); URLSpan url = new URLSpan(“http://www.baidu.com&quot;); tvtext.setMovementMethod(LinkMovementMethod.getInstance()); span.setSpan(url, 0, 16, Spanned.SPAN_INCLUSIVE_INCLUSIVE); span.setSpan(new ForegroundColorSpan(Color.BLUE), 0, 16, Spannable.SPAN_INCLUSIVE_INCLUSIVE); span.setSpan(new ForegroundColorSpan(Color.GREEN), 16, text.length(), Spannable.SPAN_EXCLUSIVE_INCLUSIVE); tvtext.setText(span); 用TextView实现文字横向滚动 &lt;TextView android:id=&quot;@+id/myTextView&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:focusable=&quot;true&quot;//是否获得焦点 android:textColor=&quot;@android:color/black&quot; android:ellipsize=&quot;marquee&quot;//以跑马灯的形式出现 android:scrollHorizontally=&quot;true&quot;//横向滚动 android:marqueeRepeatLimit=&quot;marquee_forever&quot;//表示重复滚动的次数（无限次） android:focusableInTouchMode=&quot;true&quot; android:textSize=&quot;15dp&quot; android:singleLine=&quot;true&quot; android:text=&quot;@string/text&quot;&gt;]]></content>
      <categories>
        <category>Android</category>
        <category>控件</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>TextView</tag>
        <tag>font</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2Fcjlg1o2dn0002ysv5mhvc68ge%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
