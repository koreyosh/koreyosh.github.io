<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[AsyncTask的使用与演示（加载图片）]]></title>
    <url>%2F2018%2Fcjlgefw4x00038cv5rhbl9dat%2F</url>
    <content type="text"><![CDATA[AsyncTask(异步任务） 主要作用是处理主线程与子线程之间的通信问题。 主线程非常重要，主要用加载我们的UI界面，完成系统和我们用户之间的交互，并将交互后的结果展示给用户，因此主线程又称为UI线程。 我们不能在主线程中进行耗时操作（加载网络图片或进行数据库查询），因为会阻塞我们的UI Thread,同样我们也不能在子线程当中来操作我们的UI元素，那么如果我们想要从网络上下载一个图片，又怎么把它更新到我们的UI控件上呢，这就关系到主线程和子线程之间的通信问题了。这时我们就可以用到AsyncTask。 一般情况下，当我们需要定义一个AsyncTask时，就要定义一个类来继承这个抽象类，并实现这个抽象类中的唯一的个抽象方法doInBackground，简单的总结AsyncTask的用法就是：三个泛型，四个步骤。 三个泛型 AsyncTask&lt;Params,Progress,Result&gt; Params:这个泛型指定的是我们传递给异步任务执行时的参数的类型。（通常指定的URL路经即String类型）Progress:这个泛型指定的是我们的异步任务在执行的时候将执行的进度返回给UI线程的参数的类型。（进度条的单位通常都是Integer类型）Result:这个泛型指定的异步任务执行完后返回给UI线程的结果的类型。 我们在定义一个类继承AsyncTask类的时候，必须要指定好这三个泛型的类型，如果都不指定的话，则将其都写成void。 四个步骤当我们执行一个异步任务的时候，其需要按照下面的4个步骤分别执行： onPreExecute（）：这个方法是在异步任务执行之前执行的，并且是在主线程当中执行，一般情况下，我们在这个方法里做一些UI控件的初始化动作，例如：弹出ProgressDialogdoInBackground（Params…params）：在onPreExecute（）方法执行完后会立即执行这个方法，它是用来处理异步任务的方法。 Android操作系统会在后台的线程池中开启一个子线程来执行我们这个方法，所以这个方法是在子线程中执行的。这个方法执行完之后，会将我们的结果发送给最后一个onPostExecute（）方法，在这个方法里，我们可以从网络当中获取数据等一些耗时操作onProgressUpdate(Progress…values):这个方法和onPreExecute方法一样都是在主线程当中执行的额，它主要是将执行的进度返回给我们的UI界面，更新我们的进度，例如：下载一张网络图片，我们要时刻显示它的进度，就可以使用这个方法来更新我们的进度。在这个方法调用之前，我们需要在doInBackground方法中调用一个publishProgress（Progress）的方法来将我们的进度时时刻刻传递给onPostUpdate方法来更新。onPostExecute（Result…result）：当我们的异步任务执行完之后就会将结果返回给这个方法，这个方法和onPreExecute，onProgressUpdate方法一样都是在主线程中操作的，我们可以将返回结果显示在UI控件上。 我们的AsyncTask抽象类只有一个抽象方法，因为，如果我们要做一个异步任务，我们必须为其开辟一个新的线程，让其完成一些操作，而在完成这个异步任务时，我们可能并不需要弹出ProgressDialog并更新进度条，也不要需要将结果更新给我们的UI界面，所以除了doInBackground方法之外的三个方法都不是必须要有的，因此我们必须要实现的方法是doInBackground方法。 在使用AsyncTask做异步任务时，必须要遵循以下原则： AsyncTask类必须要在UI Thread中加载，在Android Jelly_Bean版本之后这些都是自动完成的 execute方法必须在UI Thread当中调用 AsyncTask对象必须在UI Thread当中进行实例化 AsyncTask任务只能被执行一次 onPreExecute，doInBackground，publishProgress，onProgressUpdate，onPostExecute方法，这些都是由Android系统自动调用的，不能手动去调用。 加载一张网络图片代码展示 Activity_main.xml: &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;ImageView android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;300dp&quot; android:id=&quot;@+id/image_view&quot; android:layout_centerInParent=&quot;true&quot;/&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/image_button&quot; android:layout_centerInParent=&quot;true&quot; android:text=&quot;@string/picture&quot; android:layout_below=&quot;@id/image_view&quot;/&gt; &lt;/RelativeLayout&gt; AndroidManifest.xml: &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; package=&quot;com.bignerdranch.android.asynctask&quot;&gt; &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt; &lt;application android:allowBackup=&quot;true&quot; android:icon=&quot;@mipmap/ic_launcher&quot; android:label=&quot;@string/app_name&quot; android:supportsRtl=&quot;true&quot; android:theme=&quot;@style/AppTheme&quot;&gt; &lt;activity android:name=&quot;.MainActivity&quot;&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;android.intent.action.MAIN&quot;/&gt; &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot;/&gt; &lt;/intent-filter&gt; &lt;/activity&gt;&lt;!-- ATTENTION: This was auto-generated to add Google Play services to your project for App Indexing. See https://g.co/AppIndexing/AndroidStudio for more information. --&gt; &lt;meta-data android:name=&quot;com.google.android.gms.version&quot; android:value=&quot;@integer/google_play_services_version&quot;/&gt; &lt;/application&gt; &lt;/manifest&gt; string.xml: &lt;resources&gt; &lt;string name=&quot;app_name&quot;&gt;AsyncTask&lt;/string&gt; &lt;string name=&quot;picture&quot;&gt; 加载一张网络图片 &lt;/string&gt; &lt;/resources&gt; MainActivity.java: package com.bignerdranch.android.asynctask; import android.app.ProgressDialog;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.os.AsyncTask;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.view.View;import android.widget.Button;import android.widget.ImageView; import com.google.android.gms.appindexing.AppIndex;import com.google.android.gms.common.api.GoogleApiClient; import java.io.IOException;import java.io.InputStream;import java.net.HttpURLConnection;import java.net.URL; public class MainActivity extends AppCompatActivity { private ImageView mImageView; private Button mButton; ProgressDialog progressDialog; private final static String IMAGE_PATH = “http://img4.imgtn.bdimg.com/it/u=3153784763,2205498087&amp;fm=27&amp;gp=0.jpg&quot;; private GoogleApiClient mClient; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mImageView = (ImageView) findViewById(R.id.image_view); mButton = (Button) findViewById(R.id.image_button); mButton.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { new MyAsyncTask().execute(IMAGE_PATH); } }); progressDialog = new ProgressDialog(MainActivity.this); progressDialog.setTitle(&quot;提示信息&quot;); progressDialog.setMessage(&quot;正在加载，请稍候...&quot;); progressDialog.setCancelable(false); progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER); mClient = new GoogleApiClient.Builder(this).addApi(AppIndex.API).build(); } public class MyAsyncTask extends AsyncTask&lt;String, Bitmap, Bitmap&gt; { @Override public void onPreExecute() { super.onPreExecute(); progressDialog.show(); } protected Bitmap doInBackground(String... params) { return getBitmap(); } private Bitmap getBitmap() { Bitmap bitmap = null; HttpURLConnection connection = null; InputStream inputStream = null; try { URL url = new URL(IMAGE_PATH); connection = (HttpURLConnection)url.openConnection(); connection.setDoInput(true); connection.connect(); inputStream=connection.getInputStream(); bitmap= BitmapFactory.decodeStream(inputStream); } catch (IOException e) { e.printStackTrace(); } finally { if (inputStream!=null){ try { inputStream.close(); } catch (IOException e) { e.printStackTrace(); } } if(connection!=null){ connection.disconnect(); } } return bitmap; } public void onProgressUpdate(Bitmap values){ super.onProgressUpdate(values); } public void onPostExecute(Bitmap result){ super.onPostExecute(result); mImageView.setImageBitmap(result); progressDialog.dismiss(); } } }参考文献：AsyncTask详解]]></content>
      <categories>
        <category>Android</category>
        <category>AsyncTask</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>AsyncTask</tag>
        <tag>Thread</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TextView的用法]]></title>
    <url>%2F2018%2Fcjlgeipid00009cv5pgst5u83%2F</url>
    <content type="text"><![CDATA[用TextView显示图片和文字可将图片与文字写在一个TextView中 android:drawableTop=&quot;@drawable/grass&quot; &lt;!--more--&gt; 用TextView显示两种颜色的字体在主活动中添加如下代码：private String source = ““ + “第一种颜色，第二种颜色，” + “百度一下\””;TextView mTextShow=(TextView)findViewById(R.id.myTextView);mTextShow.setText(Html.fromHtml(source));//将source通过Html解析返回给客户端mTextShow.setMovementMethod(LinkMovementMethod.getInstance());//不设置，点击只能是无效的 代码解释：标签：规定文本的尺寸、字体和颜色： 其中\是转义字符，用来转义“ 标签定义超链接，用于从一个页面链接到另一个页面。 元素最重要的属性是 href 属性，它指定链接的目标。 在所有浏览器中，链接的默认外观如下： 未被访问的链接带有下划线而且是蓝色的 已被访问的链接带有下划线而且是紫色的 活动链接带有下划线而且是红色的 使用SpannableString String text1 = “sometimes to say,”; String text2 = “is not to believe”; String text = text1 + text2; TextView tvtext = (TextView) findViewById(R.id.text_view1); SpannableString span = new SpannableString(text); URLSpan url = new URLSpan(“http://www.baidu.com&quot;); tvtext.setMovementMethod(LinkMovementMethod.getInstance()); span.setSpan(url, 0, 16, Spanned.SPAN_INCLUSIVE_INCLUSIVE); span.setSpan(new ForegroundColorSpan(Color.BLUE), 0, 16, Spannable.SPAN_INCLUSIVE_INCLUSIVE); span.setSpan(new ForegroundColorSpan(Color.GREEN), 16, text.length(), Spannable.SPAN_EXCLUSIVE_INCLUSIVE); tvtext.setText(span); 用TextView实现文字横向滚动 &lt;TextView android:id=&quot;@+id/myTextView&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:focusable=&quot;true&quot;//是否获得焦点 android:textColor=&quot;@android:color/black&quot; android:ellipsize=&quot;marquee&quot;//以跑马灯的形式出现 android:scrollHorizontally=&quot;true&quot;//横向滚动 android:marqueeRepeatLimit=&quot;marquee_forever&quot;//表示重复滚动的次数（无限次） android:focusableInTouchMode=&quot;true&quot; android:textSize=&quot;15dp&quot; android:singleLine=&quot;true&quot; android:text=&quot;@string/text&quot;&gt;]]></content>
      <categories>
        <category>Android</category>
        <category>TextView</category>
        <category>控件</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>TextView</tag>
        <tag>font</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android王国简介]]></title>
    <url>%2F2018%2Fcjlgefw4p00018cv5dnn0hirx%2F</url>
    <content type="text"><![CDATA[Android的系统架构Android大致可以分为四层架构：Linux 内核层、系统运行库层、应用框架层、应用层 Linux内核层 Android系统是基于Linux内核的，这一层为Android设备的各种硬件提供底层驱动，如显示驱动、音频驱动、照相机驱动、蓝牙驱动等。 系统运行库层 这一层通过一些C/C++库来为Android系统提供主要的特性支持。如SQLite数据库提供了数据库的支持，Webkit库提供了浏览器内核的支持等。 同样，在这一层还有Android运行时库，它主要提供一些核心库，能够允许开发者使用java语言来编写Android应用。另外Android运行时库中还包含了Dalvik虚拟机，它使每个Android应用都能够运行在独立的进程当中，并且拥有一个自己的Dalvik虚拟机实例。相较于java虚拟机，Davlik是专门为移动设备定制的 ，它针对手机内存、CPU性能有限等情况作了优化处理。 应用框架层 这一层主要提供构件应用程序时可能用到的各种API，Android自带的一些核心应用就是使用这些API完成的，开发者也可以通过使用这些API来构建自己的应用程序。 应用层 所有安装在手机上的应用程序都是属于这一层的，比如系统自带的联系人、短信等程序。 Android应用开发特色四大组件 活动（Activity）：活动是Android应用程序的门面，凡是在应用中你看得到的东西，都是放在活动中的，它主要是负责和用户交互的组件。 服务（Service）：服务相对来说比较低调，你无法看到它，但它会在后台一直默默地运行，即使用户退出了应用，服务仍然是可以继续运行的。它常用于为其它组件 提供后台服务或者监控其他组件的运行状态，经常用来执行一些耗时操作。 广播接收器（Broadcast Receiver）：广播接收器允许你的应用接收来自各处的广播消息，比如电话、短信等。当然你的应用同样也可以向外发出广播消息。其主要 是用来监听应用程序中的其它组件。 内容提供器（Content Provider）：为应用程序之间共享数据提供了可能，比如你要读取系统电话簿中的联系人，就需要内容提供器来完成。它主要是应用程序之间 实现实时数据交换。 丰富的系统控件 TextView：它主要用于在界面上显示一段文本信息。 Button：是程序用于和用户交互的一个重要组件。 EditText：它允许用户在控件里输入和编辑内容，并在程序中对这些内容进行修改。 ImageView：是用于在界面上展示图片的一种控件。它可以让我们的程序界面变的更加丰富多彩。 ProgressBar：用于在界面上显示一个进度条，表示我们的程序正在加载一些数据。 AlertDialog：可以在当前界面弹出一个对话框，这个对话框是置顶于所有界面元素之上的。 ListView：允许通过手指上下滑的方式将屏幕外的数据滚动到屏幕内，同时屏幕上原有的数据将会滚出屏幕。 SQLite数据库 Android系统自带了这种轻量级的、运算速度极快的嵌入式关系型数据库。它不仅支持标准的SQL语法，还可以通过Android封装好的API进行操作，让存储和读取数据变的更加方便。 强大的多媒体 Android系统提供了强大的多媒体服务，如音乐、视频、录音、拍照等，这一切你都可以在程序中通过代码进行控制，让你的应用变的更加丰富多彩。 地理位置定位 基于位置的服务所围绕的核心就是要先确定出用户所在的位置。通常有两种技术方式可以实现：一种是GPS定位，一种是通过网络定位。GPS定位的工作原理是基于手机内置的GPS硬件直接和卫星交互来获取当前的经纬度信息，这种定位方式精确度非常高。但缺点是只能在室外使用，室内基本无法接收到卫星的信号。网络定位的工作原理是根据手机当前网络附近的三个基站进行测速，以此计算出手机和每个基站之间的距离，再通过三角定位确定出一个大概的位置，这种定位方式精确度一般，但优点在于室内你室外都可以时候用。]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2Fcjlgefw5400078cv5u9evhlig%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
